(function ($) {

    $("#shoppingcart").on("click", function (e) {
        if (! (e.target.className === 'icon-remove' || e.target.className === 'shoppingcart-remove'))
            return;
        
        e.preventDefault();

        // Check if the clicked button is generated by KO. If so, we simply remove the item from the model and return.
        var shoppingCartItem = ko.dataFor(e.target);


        if (shoppingCartItem != null) {
            shoppingCartItem.remove();
            return;
        }

        // If we got here, the clicked button was not created by KO (which should only happen if we disabled KO).
        var $button = $(this);
        var $tr = $button.parents("tr:first");
        var $isRemoved = $("input[name$='IsRemoved']", $tr).val("true");
        var $form = $button.parents("form");

        $form.submit();

    });

    /*****************************************************     Validation Extenders     ******************************************************/
    ko.extenders.positive = function (target, overrideMessage) {
        var result = ko.computed({
            read: target,
            write: function (newValue) {
                if (newValue >= 0) {
                    target(newValue);
                } else {
                    target.notifySubscribers(0);
                }
            }
        });
        result(target());
        return result;
    }
    /*****************************************************     * ShoppingCartItem class     ******************************************************/
    var ShoppingCartItem = function (data) {

        this.id = data.id;
        this.sku = data.sku;
        this.type = data.type;
        this.title = data.title;
        this.unitPrice = data.unitPrice;
        this.quantity = ko.observable(data.quantity).extend({ positive: "" });

        this.total = ko.dependentObservable(function () {
            return this.unitPrice * parseInt(this.quantity());
        }, this);

        this.remove = function () {
            shoppingCart.items.remove(this);
            saveChanges();
        };

        this.quantity.subscribe(function (value) {
            saveChanges();
        });

        this.index = ko.dependentObservable(function () {
            return shoppingCart.items.indexOf(this);
        }, this);
    };


    /*****************************************************     * ShoppingCart (viewmodel)     ******************************************************/
    var shoppingCart = {
        items: ko.observableArray()
    };

    shoppingCart.calculateSubtotal = ko.dependentObservable(function () {
        return $.Enumerable.From(this.items()).Sum(function (x) { return x.total(); });
    }, shoppingCart);

    shoppingCart.itemCount = ko.dependentObservable(function () {
        return $.Enumerable.From(this.items()).Sum(function (x) { return parseInt(x.quantity()); });
    }, shoppingCart);

    shoppingCart.hasItems = ko.dependentObservable(function () {
        return this.items().length > 0;
    }, shoppingCart);

    shoppingCart.hasProducts = ko.dependentObservable(function () {
        var products = $.Enumerable.From(this.items()).Sum(function (x) { return x.type == "ShippingProduct" ? 0 : parseInt(x.quantity()); });
        return products > 0;
    }, shoppingCart);

    shoppingCart.calculateGST = function () { return this.calculateSubtotal() / 11; };
    shoppingCart.calculateTotal = function () { return this.calculateSubtotal(); };




    /*****************************************************     * Save Changes     ******************************************************/
    // This is the correct way to POST Json data to Orchard, with an Anti-Forgery token included in a header
    var saveChanges = function () {
        var data = $.Enumerable.From(shoppingCart.items()).Select(function (x) { return { productId: x.id, isRemoved: false, quantity: parseInt(x.quantity()) }; }).ToArray();
        var tokenName = '__RequestVerificationToken';
        var token = $("input[type='hidden'][name='" + tokenName + "']").val(); // getAntiForgeryToken();
        var url = $("article.shoppingcart").data("update-shoppingcart-url");
        var headers = {};
        headers[tokenName] = token;
        var config = {
            url: url,
            type: "POST",
            headers: headers,
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data, textStatus, jqXHR) { $("body").trigger("updateOrchard", data); }
        };
        $.ajax(config);

    };

    /*****************************************************     * Initialization     ******************************************************/
    if ($("article.shoppingcart").length > 0) {
        $.ajaxSetup({ cache: false });
        ko.applyBindings(shoppingCart, $("#shoppingcart")[0]);
        var dataUrl = $("article.shoppingcart").data("load-shoppingcart-url");

        // Clear any existing table rows.
        $("article.shoppingcart tbody").empty();

        // Hide the "Update" button, as we will auto update the quantities using AJAX.
        $("button[value='Update']").hide();

        $.getJSON(dataUrl, function (data) {
            for (var i = 0; i < data.items.length; i++) {
                var item = data.items[i];
                shoppingCart.items.push(new ShoppingCartItem(item));
                $("body").trigger("updateOrchard", data);
            }
        });
    }

})(jQuery);